// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_service.go -package=mocks -source=service.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	dto "project-helper/internal/domain/dto"
	entity "project-helper/internal/domain/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExtractorService is a mock of ExtractorService interface.
type MockExtractorService struct {
	ctrl     *gomock.Controller
	recorder *MockExtractorServiceMockRecorder
}

// MockExtractorServiceMockRecorder is the mock recorder for MockExtractorService.
type MockExtractorServiceMockRecorder struct {
	mock *MockExtractorService
}

// NewMockExtractorService creates a new mock instance.
func NewMockExtractorService(ctrl *gomock.Controller) *MockExtractorService {
	mock := &MockExtractorService{ctrl: ctrl}
	mock.recorder = &MockExtractorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtractorService) EXPECT() *MockExtractorServiceMockRecorder {
	return m.recorder
}

// ExtractTag mocks base method.
func (m *MockExtractorService) ExtractTag(tag entity.Tag) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTag", tag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractTag indicates an expected call of ExtractTag.
func (mr *MockExtractorServiceMockRecorder) ExtractTag(tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTag", reflect.TypeOf((*MockExtractorService)(nil).ExtractTag), tag)
}

// ExtractTags mocks base method.
func (m *MockExtractorService) ExtractTags(arg entity.Arg) entity.Tags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTags", arg)
	ret0, _ := ret[0].(entity.Tags)
	return ret0
}

// ExtractTags indicates an expected call of ExtractTags.
func (mr *MockExtractorServiceMockRecorder) ExtractTags(arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTags", reflect.TypeOf((*MockExtractorService)(nil).ExtractTags), arg)
}

// MockTagService is a mock of TagService interface.
type MockTagService struct {
	ctrl     *gomock.Controller
	recorder *MockTagServiceMockRecorder
}

// MockTagServiceMockRecorder is the mock recorder for MockTagService.
type MockTagServiceMockRecorder struct {
	mock *MockTagService
}

// NewMockTagService creates a new mock instance.
func NewMockTagService(ctrl *gomock.Controller) *MockTagService {
	mock := &MockTagService{ctrl: ctrl}
	mock.recorder = &MockTagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagService) EXPECT() *MockTagServiceMockRecorder {
	return m.recorder
}

// GetTagValue mocks base method.
func (m *MockTagService) GetTagValue(request *dto.GetTagValueRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagValue", request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagValue indicates an expected call of GetTagValue.
func (mr *MockTagServiceMockRecorder) GetTagValue(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagValue", reflect.TypeOf((*MockTagService)(nil).GetTagValue), request)
}

// MockPredefinedArgService is a mock of PredefinedArgService interface.
type MockPredefinedArgService struct {
	ctrl     *gomock.Controller
	recorder *MockPredefinedArgServiceMockRecorder
}

// MockPredefinedArgServiceMockRecorder is the mock recorder for MockPredefinedArgService.
type MockPredefinedArgServiceMockRecorder struct {
	mock *MockPredefinedArgService
}

// NewMockPredefinedArgService creates a new mock instance.
func NewMockPredefinedArgService(ctrl *gomock.Controller) *MockPredefinedArgService {
	mock := &MockPredefinedArgService{ctrl: ctrl}
	mock.recorder = &MockPredefinedArgServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPredefinedArgService) EXPECT() *MockPredefinedArgServiceMockRecorder {
	return m.recorder
}

// GetPredefinedArgValues mocks base method.
func (m *MockPredefinedArgService) GetPredefinedArgValues(request *dto.GetPredefinedArgsRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPredefinedArgValues", request)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPredefinedArgValues indicates an expected call of GetPredefinedArgValues.
func (mr *MockPredefinedArgServiceMockRecorder) GetPredefinedArgValues(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPredefinedArgValues", reflect.TypeOf((*MockPredefinedArgService)(nil).GetPredefinedArgValues), request)
}

// TryToFindPredefinedArgValue mocks base method.
func (m *MockPredefinedArgService) TryToFindPredefinedArgValue(request *dto.TryToFindPredefinedArgRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryToFindPredefinedArgValue", request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryToFindPredefinedArgValue indicates an expected call of TryToFindPredefinedArgValue.
func (mr *MockPredefinedArgServiceMockRecorder) TryToFindPredefinedArgValue(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryToFindPredefinedArgValue", reflect.TypeOf((*MockPredefinedArgService)(nil).TryToFindPredefinedArgValue), request)
}
