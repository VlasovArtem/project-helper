// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_service.go -package=mocks -source=service.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	config "project-helper/internal/config"
	entity "project-helper/internal/domain/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockArgService is a mock of ArgService interface.
type MockArgService struct {
	ctrl     *gomock.Controller
	recorder *MockArgServiceMockRecorder
}

// MockArgServiceMockRecorder is the mock recorder for MockArgService.
type MockArgServiceMockRecorder struct {
	mock *MockArgService
}

// NewMockArgService creates a new mock instance.
func NewMockArgService(ctrl *gomock.Controller) *MockArgService {
	mock := &MockArgService{ctrl: ctrl}
	mock.recorder = &MockArgServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArgService) EXPECT() *MockArgServiceMockRecorder {
	return m.recorder
}

// PrepareArgs mocks base method.
func (m *MockArgService) PrepareArgs(ctx context.Context, operation config.Operation) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareArgs", ctx, operation)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareArgs indicates an expected call of PrepareArgs.
func (mr *MockArgServiceMockRecorder) PrepareArgs(ctx, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareArgs", reflect.TypeOf((*MockArgService)(nil).PrepareArgs), ctx, operation)
}

// MockOperationService is a mock of OperationService interface.
type MockOperationService struct {
	ctrl     *gomock.Controller
	recorder *MockOperationServiceMockRecorder
}

// MockOperationServiceMockRecorder is the mock recorder for MockOperationService.
type MockOperationServiceMockRecorder struct {
	mock *MockOperationService
}

// NewMockOperationService creates a new mock instance.
func NewMockOperationService(ctrl *gomock.Controller) *MockOperationService {
	mock := &MockOperationService{ctrl: ctrl}
	mock.recorder = &MockOperationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationService) EXPECT() *MockOperationServiceMockRecorder {
	return m.recorder
}

// GetEnhancedOperation mocks base method.
func (m *MockOperationService) GetEnhancedOperation(ctx context.Context, name string) (config.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnhancedOperation", ctx, name)
	ret0, _ := ret[0].(config.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnhancedOperation indicates an expected call of GetEnhancedOperation.
func (mr *MockOperationServiceMockRecorder) GetEnhancedOperation(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnhancedOperation", reflect.TypeOf((*MockOperationService)(nil).GetEnhancedOperation), ctx, name)
}

// GetOperationExecutionPath mocks base method.
func (m *MockOperationService) GetOperationExecutionPath(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationExecutionPath", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationExecutionPath indicates an expected call of GetOperationExecutionPath.
func (mr *MockOperationServiceMockRecorder) GetOperationExecutionPath(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationExecutionPath", reflect.TypeOf((*MockOperationService)(nil).GetOperationExecutionPath), ctx, name)
}

// MockFlagService is a mock of FlagService interface.
type MockFlagService struct {
	ctrl     *gomock.Controller
	recorder *MockFlagServiceMockRecorder
}

// MockFlagServiceMockRecorder is the mock recorder for MockFlagService.
type MockFlagServiceMockRecorder struct {
	mock *MockFlagService
}

// NewMockFlagService creates a new mock instance.
func NewMockFlagService(ctrl *gomock.Controller) *MockFlagService {
	mock := &MockFlagService{ctrl: ctrl}
	mock.recorder = &MockFlagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlagService) EXPECT() *MockFlagServiceMockRecorder {
	return m.recorder
}

// GetInitialFlags mocks base method.
func (m *MockFlagService) GetInitialFlags() *entity.Flags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitialFlags")
	ret0, _ := ret[0].(*entity.Flags)
	return ret0
}

// GetInitialFlags indicates an expected call of GetInitialFlags.
func (mr *MockFlagServiceMockRecorder) GetInitialFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialFlags", reflect.TypeOf((*MockFlagService)(nil).GetInitialFlags))
}
