// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_service.go -package=mocks -source=service.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	config "project-helper/internal/config"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigService is a mock of ConfigService interface.
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService.
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance.
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// GetAdditionalArgs mocks base method.
func (m *MockConfigService) GetAdditionalArgs() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdditionalArgs")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetAdditionalArgs indicates an expected call of GetAdditionalArgs.
func (mr *MockConfigServiceMockRecorder) GetAdditionalArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdditionalArgs", reflect.TypeOf((*MockConfigService)(nil).GetAdditionalArgs))
}

// GetApplicationPath mocks base method.
func (m *MockConfigService) GetApplicationPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetApplicationPath indicates an expected call of GetApplicationPath.
func (mr *MockConfigServiceMockRecorder) GetApplicationPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationPath", reflect.TypeOf((*MockConfigService)(nil).GetApplicationPath))
}

// GetPatternTags mocks base method.
func (m *MockConfigService) GetPatternTags() map[string]config.PatternTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatternTags")
	ret0, _ := ret[0].(map[string]config.PatternTag)
	return ret0
}

// GetPatternTags indicates an expected call of GetPatternTags.
func (mr *MockConfigServiceMockRecorder) GetPatternTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatternTags", reflect.TypeOf((*MockConfigService)(nil).GetPatternTags))
}
